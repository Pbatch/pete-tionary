schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Message {
  id: ID!
  room: String!
  round: Int!
  url: String!
  username: String!
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

type Mutation {
  createMessage(input: CreateMessageInput!): Message
  createRoom(input: CreateRoomInput!): Room
  deleteMessage(id: ID!): Message
  deleteRoom(id: ID!): Room
  updateMessage(input: UpdateMessageInput!): Message
  updateRoom(input: UpdateRoomInput!): Room
}

type Query {
  getMessage(id: ID!): Message
  getRoom(id: ID!): Room
  listMessages(filter: TableMessageFilterInput, limit: Int, nextToken: String): MessageConnection
  listRooms(filter: TableRoomFilterInput, limit: Int, nextToken: String): RoomConnection
}

type Room {
  id: ID!
  name: String!
}

type RoomConnection {
  items: [Room]
  nextToken: String
}

type Subscription {
  onCreateMessage(id: ID, room: String, round: Int, url: String, username: String): Message
    @aws_subscribe(mutations : ["createMessage"])
  onCreateRoom(id: ID, name: String): Room
    @aws_subscribe(mutations : ["createRoom"])
  onDeleteMessage(id: ID, room: String, round: Int, url: String, username: String): Message
    @aws_subscribe(mutations : ["deleteMessage"])
  onDeleteRoom(id: ID, name: String): Room
    @aws_subscribe(mutations : ["deleteRoom"])
  onUpdateMessage(id: ID, room: String, round: Int, url: String, username: String): Message
    @aws_subscribe(mutations : ["updateMessage"])
  onUpdateRoom(id: ID, name: String): Room
    @aws_subscribe(mutations : ["updateRoom"])
}

input CreateMessageInput {
  room: String!
  round: Int!
  url: String!
  username: String!
}

input CreateRoomInput {
  name: String!
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableMessageFilterInput {
  id: TableIDFilterInput
  room: TableStringFilterInput
  round: TableIntFilterInput
  url: TableStringFilterInput
  username: TableStringFilterInput
}

input TableRoomFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateMessageInput {
  id: ID!
  room: String
  round: Int
  url: String
  username: String
}

input UpdateRoomInput {
  id: ID!
  name: String
}
